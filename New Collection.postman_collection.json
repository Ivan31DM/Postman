{
	"info": {
		"_postman_id": "f9636d95-5a83-4beb-b64a-9aec6c7e5b66",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23773834"
	},
	"item": [
		{
			"name": "get_method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{test}}/get_method?name=Ivan&age=26",
					"host": [
						"{{test}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let req = request.data\r",
							"var resp = pm.response.json();\r",
							"pm.test(\"name\", function () { \r",
							"    pm.expect(resp.name).to.eql(\"Ivan\");\r",
							"});\r",
							"pm.test(\"age\", function () { \r",
							"    pm.expect(resp.age).to.eql(\"26\");\r",
							"});\r",
							"\r",
							"console.log(\"resp = \" + typeof resp.age)\r",
							"\r",
							"pm.test(\"salary\", function () { \r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"pm.test(\"name2\", function () { \r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"pm.test(\"age2\", function () { \r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"let req_salary = +req.salary\r",
							"pm.test(\"salary2\", function () { \r",
							"    pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"let family = resp.family.children[0][1]\r",
							"console.log(resp.family )\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = req.salary * 4\r",
							"pm.test(\"salary 1.5\", function () { \r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/user_info_3",
					"host": [
						"{{test}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/object_info_1?name=Ivan&age=26&weight=72",
					"host": [
						"{{test}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "weight",
							"value": "72"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/object_info_2?name=Ivan&age=26&salary=1000",
					"host": [
						"{{test}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = request.data\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"let resp_dog = resp.family.pets.dog\r",
							"pm.test(\"Your test dog\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"let resp_luky = resp.family.pets.dog\r",
							"console.log(resp.family)\r",
							"pm.test(\"Your test luky\", function () {\r",
							"    pm.expect(resp_luky.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(resp_dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/object_info_3?name=Ivan&age=26&salary=1000",
					"host": [
						"{{test}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = request.data\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = +req.age\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"req_salary = \" + req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"resp_salary = \" + resp.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary 0 = \" + resp.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary 1 = \" + resp.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary 2 = \" + resp.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req.salary\r",
							"pm.test(\"salary_0\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(req_salary);\r",
							"});\r",
							"console.log(typeof req.salary)\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_1 = +resp.salary[1]\r",
							"pm.test(\"salary_1\", function () {\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"console.log(\"salary 2 = \" +typeof resp.salary[2])\r",
							"//4. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_salary_2 = +resp.salary[2]\r",
							"pm.test(\"salary_2\", function () {\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\" ,);\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\" );\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\" );\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\" , req.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\" , req.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\" , req.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let i = 0\r",
							"while (i < 3) {\r",
							"    console.log(\"skript = \" + resp.salary[i])\r",
							"    i = i + 1\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/object_info_4?name=Ivan&age=26&salary=1000",
					"host": [
						"{{test}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//pm.environment.get(\"salary\" , request.salary);\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req.salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_2 = req.salary*2\r",
							"let resp_qa_salary_after_6_months = resp.qa_salary_after_6_months\r",
							"pm.test(\"salary*2\", function () {\r",
							"    pm.expect(resp_qa_salary_after_6_months).to.eql(req_salary_2);\r",
							"});\r",
							"console.log(resp)\r",
							"console.log(\"resp_2 = \" + req_salary_2)\r",
							"console.log(\"resp_6 = \" + resp_qa_salary_after_6_months)\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_2_7 = req.salary*2.7\r",
							"pm.test(\"salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req_salary_2_7);\r",
							"});\r",
							"\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let resp_salary3_3 = resp[\"qa_salary_after_1.5_year\"]\r",
							"pm.test(\"salary*3.3\", function () {\r",
							"    pm.expect(resp_salary3_3).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let resp_salary3_8 = resp[\"qa_salary_after_3.5_years\"]\r",
							"pm.test(\"salary*3.8\", function () {\r",
							"    pm.expect(resp_salary3_8).to.eql(req.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let resp_u_name = resp.person.u_name[1]\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(resp_u_name).to.eql(req_salary);\r",
							"});\r",
							"console.log(resp.person)\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let resp_u_age = resp.person.u_age\r",
							"let req_age = +req.age\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(resp_u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// console.log(resp.peson)\r",
							"// let i = 0\r",
							"// while (i < 4) {\r",
							"//     console.log(resp.person[i])\r",
							"//     i = i + 1\r",
							"// };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{test}}/user_info_2",
					"host": [
						"{{test}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}